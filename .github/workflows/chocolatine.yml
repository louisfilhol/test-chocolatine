name: Chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
    paths-ignore:
      - '.github/workflows/chocolatine.yml'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: https://github.com/EpitechPromo2028/B-DOP-200-MPL-2-1-chocolatine-louis.filhol-valantin
  EXECUTABLES: "mysh"

jobs:
  check_coding_style:
    if: ${{ github.repository_owner == 'louis.filhol' }}
    name: Check Coding Style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Coding Style Checker
        run: |
          coding-style.sh $(pwd) $(pwd)
      - name: Check coding
        run: |
          if [ -s c-s-r.log ]; then
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d ':' -f 1)
              line_num=$(echo "$line" | cut -d ':' -f 2)
              error_type=$(echo "$line" | cut -d ':' -f 3 | cut -d '-' -f 1)
              error_code=$(echo "$line" | cut -d ':' -f 4)
              echo "::error file=$file,line=$line_num,title=$error_type coding style error::$error_code"
            done < c-s-r.log
            exit 1
          fi

  check_program_compilation:
    name: Check Program Compilation
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check_coding_style
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Compile Program
        run: make
        timeout-minutes: 2
      - name: Clean Compilation
        run: make clean
      - name: Verify Executables
        run: |
          IFS=',' read -ra EXECS <<< "$EXECUTABLES"
          for EXEC in "${EXECS[@]}"; do
            if [ ! -x "$EXEC" ]; then
              echo "Error: $EXEC is either missing or not executable."
              exit 1
            fi
          done

  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check_program_compilation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Run Tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Push to Mirror Repository
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Mirror to Repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SHHPK }}
